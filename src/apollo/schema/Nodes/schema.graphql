#import "./TemplateData.graphql"

extend type Query {
	nodes: [Node!]
	getNode(id: ID!): Node
	getNodesByTemplate(template: String!): [Node!]
	getMapping(nodeUUID: ID!, templateID: ID!, mapping: String!): Mapping
}

extend type Mutation {
	updateNode(id: ID!, input: UpdateNodeInput!): Node
	updateTemplateData(id: ID!, input: UpdateTemplateDataInput!): Template
	deleteNode(id: ID!): DeleteNodePayload
}

extend type Subscription {
	nodeSubscription: NodeSubscription!
}

type Node {
	id: ID!
	uuid: String!
	name: String
	endpoints: [Endpoint!]
	templates: [Template!]
}

type Endpoint {
	id: ID!
	name: String!
	output: Boolean!
	range: String
	value: Float
}

type Template {
	id: ID!
	name: String!
	data: TemplateData!
	mappings: [Mapping!]!
}

type Mapping {
	id: ID!
	name: String!
	endpoint: Endpoint!
}

input UpdateNodeInput {
	name: String
}

type DeleteNodePayload {
	id: ID!
}

type NodeSubscription {
	mutation: MutationType!
	node: Node!
}
