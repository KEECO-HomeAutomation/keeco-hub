extend type Query {
	users: [User!]!
	getUser(id: ID!): User!
}

extend type Mutation {
	createUser(input: CreateUserInput!): User!
	updateUser(id: ID!, input: UpdateUserInput!): User
	deleteUser(id: ID!): DeleteUserPayload!
}

extend type Subscription {
	userSubscription: UserSubscription!
}

type User {
	id: ID!
	username: String!
	sessions: [Session!]
}

type Session {
	issued: String!
	invalidated: Boolean!
}

input CreateUserInput {
	username: String!
	password: String!
}

input UpdateUserInput {
	password: String
}

type DeleteUserPayload {
	id: ID!
}

type UserSubscription {
	mutation: MutationType!
	node: User!
}
